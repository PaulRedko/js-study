# DOM - Document Object Model

- the DOM is a JS representation of a webpage
- it is my JS window into the contents of a webpage
- it is a bunch of objects i can interect with via JS
- every page consists of a bunch of JS objects

Most important properties and methods:
innerText, textContent, innerHTML, value, parentElement, children, nextSibling, previousSibling, style, classList, getAttribute(), setAttribute(), appendChild(), append(), prepend(), removeChild(), remove, createElement

ex:
const nImg = document.createElement('img');
nImg.src =
'https://images.unsplash.com/photo-1593771009063-e2a5fc81be47?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=646&q=80';
nImg.style.width = '300px';
document.body.append(nImg);

const allEls = document.body.children

setInterval(() => {
for(let el of allEls){
const rotation = Math.floor(Math.random() _ 360);
const x = Math.floor(document.body.clientWidth _ Math.random());
const y = Math.floor(document.body.clientHeith \* Math.random());
el.style.transform = `translate(${x}px,${y}px)`;
}
}, 2000)

// The Document Object

- use console.dir(document) - to see the actual document file/content.
- document object is our entry point into the world of the DOM. It contains representation of all the content on a page, plus tons of useful methods and properties.

// SELECTING ELEMENTS

- we select and manipulate, and add events to the element

  document.getElementById('myID') // and we pass our id as a string. As a result it return ID as an HTML code. In order to get an object we can save this selection as a variable and request with console.dir(varName).

  document.getElementByTagName - selecting in the same way, but we get a collection of elements, even if there is only one element in that collection. It looks as an array, but not an array. it is a collection, which allows to do with it some arrayish things. those methods allow to view and find information about the collection, but does not allow to change it. - it is possible to collect input values from the input fileds of the form by simple for of loop:
  for(let input of inputs) {console.log(input.value)} // but only before pressing Submit button, after that page reloads.

  document.getElementByClassName - we do same operations with the selection of classes. The only note is that in both cases when we want to select an element within a collection, we need to specify its number in the array.

- there is one element that allows to combine all other, by specifying CSS style selector in the value. It only sends us back the first match, not the collection of items as before.

  document.querySelector('h1') // select by tag. But we only get the first match. No other h1 headers if available to the page.
  document.querySelector('#red') // selecting ID
  document.querySelector('.big') // select by class
  document.querySelectorAll // this type returns all items, not only the first one as in the regular querySelector.
  Also it return not an HTML collection but a node list. Different type.

- it is important here to know the CSS attribute selector syntax: 'tag', '#id', '.class'.

// MANIPULATING ELEMENTS

- usually it is more about accessing - 18 most used properties and methods for manipulation.

  <element>.innerText: returns a string-content of the selected element.
  ex:
  document.body.innerText - returns texts for whole body. It is possible to change the text in console and it changes back on the reload. However it is possible to save script which will launch on page load.

  <box>.textContent - returns texts and scripted texts too.
  <li>.innerHTML - allows to get HTML text and even adjust it, but it should be one line in the console.

- it is also possible to add text to existing text. with the use of +=. EX: h1.innerText += " is cool" // h1: My website is cool.

// value, checked, placeholder, src, href

- those attributes work in the same way as above. it is possible to change them with a DOM.

- selecting one of the attributes
  const range = document.querySelector('input[type="range"]')
  range.getAttribute('type') // we get what is the value of the attibute.
  range.setAttribute)('type','checkbox') // we can set the attribute or change it.

- parentElement, children, nextSibling, previousSibling:

  const firstLi = document.querySelector('li');
  firstLi.parentElement.innerHTML = 'what do you want?' // whole ul.
  firstLi.parentElement.parentElement.parentElement // it is possible to access top elements this way till we get to html element.
  body.children[1].children[0] // it is possible to select children from the body.
  body.children[1].children[1].nextElementSibling.innerText = 'all if fine' // we move from top to bottom and in sides with nextElementSibling/previousElementSibling.

- Changing several elements Style
  style: this property is only show if it is set up as inline code. If it is not inline, we can adjust it but initial styling is not shown on the dom request.
  EX:
  const h1 = document.querySelector('h1');
  h1.style.color // it will show inline color which is teal.

      - all the style properties in JS are camel cased, in contrast to CSS where they are kebab cased.
      - but this setting is not an easy way to use for multiple style changes.
      - how to use a loop? Ex:

            const liS = document.querySelectorAll('li');
            const colors = ['red', 'yellow', 'blue'];
            liS.forEach((li, i) => {
            const color = colors[i];
            li.style.color = color;
            });

      - inline styles which are populated with DOM are extremly specific, so the win on other things.

// getComputedStyle - Style values - part 2

- to get the value we need first to have two variables. First for the element, second for the computed style.
  const h1 = document.querySelector('h1');
  const compStyle = document.getComputedStyle(h1); // here is it not a string, it is a variable.

- getComputedStyles(var) - Computed means that part of the stiles comes from CSS file, some from JS with hovers. So the styles are final and computed too. It is the best way to know the real value of styling settings. Which styling wins. There is a part from CSS or inline.

// Manipulating Classes
we have selected the class 'todo':
const todo = document.querySelector('#todos .todo');
and we want to apply to it a new style marked as class 'done'.
todo.getAttribute('class') // 'todo'
todo.setAttribute('class' 'done') // the element which had this class applied changed styling from todo > done.
however it has got changed whole, and lost previous styling.
it is possible to apply two classes and it works:
todo.setAttribute('class' 'todo done')

todo.classList // a new element that contains classes applied to the element and also it list the methods we can apply to it.
if we want to remove certain styling for an element, we name variable, classList property and apply method remove, and add the style we want to remove.  
todo.classList.remove('done');
classList property and its methods are good to change the class styling, one time for many.

// Creating Elements
to create an element we use property .createElement('name'). If we want to also pass some text into the element, we need to pass it separatly.
const newH2 = document.createElement('h2');// <h2></h2>
console.dir(newH2);
newH2.innerText = 'New and great heading'
style is added in a similar way:
newH2.classList.add('special')

but how to position the element? to do this we use properties appendChild. We want to add this element into the section in html. We firstly pass value of section as a variable and after that...
section.appendChild(newH2); // element should add to the end of list.
parentUL.insertBefore(newH2, firstLI); // element can be added to the center of the list. However we need to select the element and the element before.

Element.incertAjacentElement() >> TargetElement.incertAjacentElement(position, element)
EX:
const prag = document.querySelectorAll('p')[1]
const i = document.createElement('i');
i.innerText = "I AM ITALICS "
prag.insertAdjacentElement('beforeend',i) // or
prag.insertAdjacentElement('aftereend',i)

append() prepend() / newer methods, not supported in IE.
append() - it is possible to insert several elements with this method.
ex:
prag.prepend(i,newH2) // both of them can insert two or more elements. While appendChild() can only do one element.
prag.append(i,newH2)

//remove(), removeChild() methods
remove() - newer, not supported in IE. We set wariable before the method h1.remove().
removeChild() - older, supports IE. it requires to specify parent node before: ui.removeChild(ul) / document.body.removeChild(h1).
if to remove h1:

1.

const h1 = document.querySelector('h1') // we specify element
h1.remove()

2.

const h1 = document.querySelector('h1') // we specify element
document.body.removeChild(h1)
